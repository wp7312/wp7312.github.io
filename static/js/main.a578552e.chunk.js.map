{"version":3,"sources":["consts/colors.ts","components/shared/style.utils.ts","components/shared/Button.tsx","components/Overview/Toolbar/Toolbar.tsx","components/shared/Tile/Tile.styles.ts","components/shared/Tile/Tile.tsx","components/shared/Tile/Counter/Counter.styles.ts","components/shared/Tile/Counter/Counter.tsx","components/Overview/InfoTiles/InfoTiles.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["IFSColor","Colors","calculateFlexBasis","size","maxSize","multiplier","flexBasis","Button","props","StyledDiv","StyledButton","value","styled","div","button","color","backgroundColor","ToolbarWrapper","Toolbar","TileStyles","TitleWrapper","LabelWrapper","ToolsWrapper","silver","CountersWrapper","Tile","iconClassName","icon","title","className","counters","ValueWrapper","StatsWrapper","StyledVerticalLine","heatherGrey","CounterWrapper","Counter","stat","InfoTilesWrapper","InfoTiles","systemCounter","connectionsCounter","callsCounter","dataVolumeCounters","App","GlobalStyle","createGlobalStyle","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a578552e.chunk.js","sourcesContent":["export const Colors = {\r\n    white: 'white',\r\n    mainBlue: '#0B4A8E',\r\n    tileBlue1: '#edf6fc',\r\n    tileBlue2: '#e4f2fb',\r\n    tileBlue3: '#dbeef9',\r\n    tileBlue4: '#d2eaf8',\r\n    disabled: '#ddddee',\r\n    disabledText: '#aaaaaa'\r\n}\r\n\r\nexport enum IFSColor {\r\n    disabledText = '#cacaca',\r\n    white = '#ffffff',\r\n    veniceBlue = '#0B4A8E',\r\n    catskillWhite = '#E1E9F1',\r\n    tropicalBlue = '#D2EAF8',\r\n    cornflowerBlue = '#C5E3F5',\r\n    rhinoBlue = '#283F63',\r\n    heatherGrey = '#B3C1CF',\r\n    downriverBlue = '#0B2D56',\r\n    alto = '#D9D9D9',\r\n    linkWaterBlue = '#E0F1F7',\r\n    vikingBlue = '#79C4DC',\r\n    poloBlue = '#7FA0C4',\r\n    // colors with opacity (number at the end of name equals opacity percentage)\r\n    shakespeare15 = '#449DD129',\r\n    spray15 ='#72F2C326',\r\n    tumbleweed08 = '#D7B3772E',\r\n    wildSandGrey = '#F5F5F5',\r\n    stormGray= '#686D85',\r\n    silver = '#C7C7C7',\r\n    AquaHaze = '#F2F5F8'\r\n}","export const calculateFlexBasis = (size: number, maxSize: number, multiplier:number) => {\r\n    let flexBasis = size*multiplier*100 / maxSize\r\n    if (flexBasis > 100){\r\n      flexBasis = 100\r\n    }\r\n    return `${flexBasis}%`\r\n}\r\n","import styled from 'styled-components'\r\nimport { calculateFlexBasis } from './style.utils'\r\n\r\nexport interface ButtonProps {\r\n    size: number;\r\n    value: string;\r\n    color?: string;\r\n    backgroundColor?: string;\r\n}\r\n\r\nexport const Button = (props: ButtonProps) => {\r\n    return (\r\n        <StyledDiv {...props} >\r\n            <StyledButton {...props} >\r\n                {props.value}\r\n            </StyledButton>\r\n        </StyledDiv>\r\n    )\r\n}\r\n\r\nexport const DisabledDiv = styled.div`\r\n    position: absolute;\r\n    margin: 5px 10px 5px 10px;\r\n    background-color: rgba(1,1,1,0.75);\r\n    width: 100%;\r\n\r\n`\r\n\r\nexport const StyledDiv = styled.div`\r\n    box-sizing: border-box;\r\n    display: flex;\r\n    overflow: hidden;\r\n    @media all and (min-width: 0px) and (max-width: 600px) {\r\n      flex-basis: ${(props: ButtonProps) => calculateFlexBasis(props.size, 6, 6)};\r\n    }\r\n    @media all and (min-width: 601px) and (max-width: 1200px) {\r\n      flex-basis: ${(props: ButtonProps) => calculateFlexBasis(props.size, 6, 3)};\r\n    }\r\n    @media all and (min-width: 1201px) and (max-width: 1700px) {\r\n      flex-basis: ${(props: ButtonProps) => calculateFlexBasis(props.size, 6, 2)};\r\n    }\r\n    @media all and (min-width: 1701px) {\r\n      flex-basis: ${(props: ButtonProps) => calculateFlexBasis(props.size, 6, 1)};\r\n    }\r\n`\r\n\r\nexport const StyledButton = styled.button`\r\n    font-weight: 500;\r\n    width: 100%;\r\n\r\n    padding: 7px 10px 7px 10px;\r\n    margin: 5px 10px 5px 10px;\r\n\r\n    text-overflow: ellipsis;\r\n    overflow: hidden;\r\n    white-space: nowrap;\r\n    justify-content: center;\r\n\r\n    color: ${(props: ButtonProps) => props.color ? props.color : 'white'};\r\n    background-color:${(props: ButtonProps) => props.backgroundColor ? props.backgroundColor : '#0B4A8E'};\r\n\r\n    border: 1px solid #0B4A8E;\r\n    border-radius: 0px;\r\n\r\n    cursor: pointer;\r\n`\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Colors } from '../../../consts/colors'\r\nimport { Button } from '../../shared/Button'\r\n\r\nconst ToolbarWrapper = styled.div`\r\n    display: flex;\r\n    flex-direction: row;\r\n    flex-wrap: wrap;\r\n`;\r\n\r\nexport const Toolbar = () => {\r\n    return (\r\n        <ToolbarWrapper>\r\n            <Button size={2} value='Database: IFS Database' />\r\n            <Button\r\n                size={1}\r\n                value='Database details'\r\n                backgroundColor={Colors.white}\r\n                color={Colors.mainBlue}\r\n            />\r\n            <Button\r\n                size={1}\r\n                value='Filters: Active variant'\r\n                backgroundColor={Colors.tileBlue1}\r\n                color={Colors.mainBlue}\r\n            />\r\n            <Button size={1} value='Apply filters' />\r\n            <Button\r\n                size={0.5}\r\n                value='Generate file'\r\n                backgroundColor={Colors.white}\r\n                color={Colors.mainBlue}\r\n            />\r\n            <Button\r\n                size={0.5}\r\n                value='View 11/11'\r\n                backgroundColor={Colors.disabled}\r\n                color={Colors.disabledText}\r\n            />\r\n        </ToolbarWrapper>\r\n    )\r\n}","import styled from 'styled-components'\r\nimport { TileProps } from './Tile'\r\nimport { Colors, IFSColor } from '../../../consts/colors';\r\nimport {calculateFlexBasis} from '../style.utils'\r\n\r\nexport const TileStyles = styled.div`\r\n    box-sizing: border-box;\r\n    color: ${Colors.mainBlue};\r\n    flex-grow: 1;\r\n    @media all and (min-width: 0px) and (max-width: 600px) {\r\n      flex-basis: ${(props: TileProps) => calculateFlexBasis(props.size, 6, 6)};\r\n    }\r\n    @media all and (min-width: 601px) and (max-width: 1200px) {\r\n      flex-basis: ${(props: TileProps) => calculateFlexBasis(props.size, 6, 3)};\r\n    }\r\n    @media all and (min-width: 1201px) and (max-width: 1700px) {\r\n      flex-basis: ${(props: TileProps) => calculateFlexBasis(props.size, 6, 2)};\r\n    }\r\n    @media all and (min-width: 1701px) {\r\n      flex-basis: ${(props: TileProps) => calculateFlexBasis(props.size, 6, 1)};\r\n    }\r\n`\r\n\r\nexport const StyledDiv = styled.div`\r\n    margin: 20px 10px 0 10px;\r\n    padding: 7px 10px 0 10px;\r\n    background-color:${(props: TileProps) => props.backgroundColor};\r\n    border: 1px solid #c7dbea;\r\n`\r\n\r\nexport const TitleWrapper = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  margin: 3px 7px 15px 7px;\r\n`;\r\n\r\nexport const LabelWrapper = styled.div`\r\n  font-size: 13px;\r\n  font-weight: 700;\r\n  i {\r\n    margin-left: 7px;\r\n  }\r\n`;\r\n\r\nexport const ToolsWrapper = styled.div`\r\n  i {\r\n    margin-left: 7px;\r\n    color: ${IFSColor.silver}\r\n  }\r\n`;\r\n\r\nexport const CountersWrapper = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n`;","import { TileStyles, StyledDiv, TitleWrapper, LabelWrapper, ToolsWrapper, CountersWrapper } from './Tile.styles';\r\nimport React from 'react';\r\n\r\nexport interface TileProps {\r\n    title: string;\r\n    icon?: string,\r\n    size: number,\r\n    backgroundColor: string,\r\n    counters: JSX.Element\r\n}\r\n\r\nexport const Tile = (props: TileProps) => {\r\n    const iconClassName = `fa fa-${props.icon}`;\r\n\r\n    return (\r\n        <TileStyles {...props}>\r\n            <StyledDiv {...props}>\r\n                <TitleWrapper>\r\n                    <LabelWrapper>\r\n                        {props.title}\r\n                        <i className={iconClassName}/>\r\n                    </LabelWrapper>\r\n                    <ToolsWrapper>\r\n                        <i className=\"fa fa-chevron-down\"/>\r\n                        <i className=\"fas fa-times\"/>\r\n                    </ToolsWrapper>\r\n                </TitleWrapper>\r\n                <CountersWrapper>\r\n                    {props.counters}\r\n                </CountersWrapper>\r\n            </StyledDiv>\r\n        </TileStyles>\r\n    )\r\n}\r\n","import styled from 'styled-components';\r\nimport { IFSColor } from '../../../../consts/colors';\r\n\r\nexport const ValueWrapper = styled.div`\r\n  font-size: 36px;\r\n`;\r\n\r\nexport const StatsWrapper = styled.div`\r\n  font-size: 12px;\r\n  i {\r\n    margin-left: 7px;\r\n  }\r\n`;\r\n\r\nexport const StyledVerticalLine = styled.div`\r\n  border-left: 2px solid ${IFSColor.heatherGrey};\r\n  margin-right: 10px;\r\n  margin-left: 10px;\r\n  height: 27px;\r\n`;\r\n\r\nexport const CounterWrapper = styled.div`\r\n  display: flex;\r\n  margin: 7px;\r\n  align-items: baseline;\r\n`;","import React from 'react'\r\nimport { CounterWrapper, StatsWrapper, StyledVerticalLine, ValueWrapper } from './Counter.styles';\r\n\r\nexport interface CounterProps {\r\n    value: number,\r\n    stat: number\r\n}\r\n\r\nexport const Counter = (props: CounterProps) => {\r\n\r\n    return (\r\n        <CounterWrapper>\r\n            <ValueWrapper>\r\n                {props.value}\r\n            </ValueWrapper>\r\n            <StyledVerticalLine/>\r\n            <StatsWrapper>\r\n                {props.stat}\r\n                <i className=\"fas fa-arrow-up\"/>\r\n            </StatsWrapper>\r\n        </CounterWrapper>\r\n    )\r\n}","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Tile } from '../../shared/Tile/Tile'\r\nimport { Counter } from '../../shared/Tile/Counter/Counter';\r\n\r\nconst InfoTilesWrapper = styled.div`\r\n    display: flex;\r\n    flex-direction: row;\r\n    box-sizing: border-box;\r\n    flex-wrap: wrap;\r\n`;\r\n\r\nexport const InfoTiles = () => {\r\n    const systemCounter = <><Counter value={123} stat={45}/></>;\r\n    const connectionsCounter = <><Counter value={67} stat={8}/></>;\r\n    const callsCounter = <><Counter value={901} stat={234}/></>;\r\n    const dataVolumeCounters = <>\r\n        <Counter value={56} stat={789}/>\r\n        <Counter value={0} stat={1}/>\r\n        <Counter value={234} stat={567}/>\r\n    </>\r\n    return (\r\n        <InfoTilesWrapper>\r\n            <Tile title={'SYSTEMS'} counters={systemCounter} icon={'cog'} size={1} backgroundColor='#edf6fc'/>\r\n            <Tile title={'CONNECTIONS'} counters={connectionsCounter} icon={'handshake'} size={1} backgroundColor='#e4f2fb'/>\r\n            <Tile title={'CALLS'} counters={callsCounter} icon={'tachometer-alt'} size={1} backgroundColor='#dbeef9'/>\r\n            <Tile title={'DATA VOLUME'} counters={dataVolumeCounters} icon={'chart-pie'} size={3} backgroundColor='#d2eaf8'/>\r\n        </InfoTilesWrapper>\r\n    )\r\n}","import React from 'react';\r\nimport { Toolbar } from './components/Overview/Toolbar/Toolbar';\r\nimport { InfoTiles } from './components/Overview/InfoTiles/InfoTiles';\r\nimport { createGlobalStyle } from 'styled-components';\r\nimport './App.css'\r\n\r\nfunction App() {\r\n  const GlobalStyle = createGlobalStyle`\r\n  * {\r\n    font-size: 16px;\r\n    font-family: 'AvenirMedium', 'AvenirMedium';\r\n  }\r\n`\r\n  return (\r\n    <div className=\"App\">\r\n      <GlobalStyle />\r\n      <Toolbar />\r\n      <InfoTiles />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}