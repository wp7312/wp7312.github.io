{"version":3,"sources":["consts/colors.ts","store/reducers/dynamicElements/dynamicElements.ts","components/shared/style.utils.ts","components/shared/Button.tsx","components/shared/IfsPopper/IfsPopper.tsx","components/shared/PopperableButton/PopperableButton.tsx","components/Overview/Toolbar/DatabaseButton/DatabaseButton.tsx","components/Overview/Toolbar/Toolbar.tsx","components/shared/Tile/Tile.styles.ts","components/shared/Tile/Tile.tsx","components/shared/Tile/Counter/Counter.styles.ts","components/shared/Tile/Counter/Counter.tsx","components/Overview/InfoTiles/InfoTiles.tsx","components/shared/charts/detailedChart/DetailedChart.tsx","components/Overview/DetailedChartTile/DetailedChartTile.tsx","components/Overview/DeltaTile/SingleDelta.styles.ts","components/Overview/DeltaTile/SingleDelta.tsx","components/Overview/DeltaTile/DeltaTile.tsx","components/Overview/DetailsTile/DetailsTile.tsx","components/shared/ClosedTilesList/ClosedTilesList.tsx","App.tsx","reportWebVitals.ts","store/reducers/reducers.ts","store/store.ts","index.tsx"],"names":["IFSColor","Colors","DynamicElementStatus","calculateFlexBasis","size","maxSize","multiplier","flexBasis","Button","React","forwardRef","props","ref","StyledDiv","StyledButton","value","styled","div","backgroundColor","css","button","color","IfsPopper","isOpen","popperProps","children","Popper","placement","open","PopperableButton","defaultOpen","buttonProps","useState","setIsOpen","anchorElement","setAnchorElement","useRef","useEffect","current","onClick","anchorEl","DatabaseButton","style","width","height","border","ToolbarWrapper","Toolbar","TileStyles","StyledMarginDiv","collapsed","TitleWrapper","LabelWrapper","ToolsWrapper","silver","ContentWrapper","dynamicElementsSlice","createSlice","name","initialState","entities","reducers","setDynamicElement","state","action","payload","status","title","VISIBLE","actions","selectDynamicElement","dynamicElements","Tile","iconClassName","icon","dispatch","useDispatch","useSelector","COLLAPSED","closed","CLOSED","setDynamicsElementStatus","console","log","className","content","ValueWrapper","StatsWrapper","StyledVerticalLine","heatherGrey","CounterWrapper","Counter","stat","InfoTilesWrapper","InfoTiles","systemCounter","connectionsCounter","callsCounter","dataVolumeCounters","DetailedChart","data","labels","datasets","type","label","fill","borderColor","borderWidth","pointStyle","pointBackgroundColor","pointBorderColor","pointRadius","pointHoverRadius","options","legend","usePointStyle","align","fontFamily","scales","yAxes","ticks","beginAtZero","fontSize","xAxes","DetailedChartTile","white","DeltaStyles","SummaryWrapper","TitlePeriodWrapper","PeriodWrapper","GraphicalStyles","Filled","total","delta","SingleDelta","periods","DeltasWrapper","DeltaTile","DetailsWrapper","DetailsTile","ClosedTilesList","Object","keys","filter","map","dynamicElementTitle","App","GlobalStyle","createGlobalStyle","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","combinedReducer","combineReducers","dynamicElementsReducer","makeStore","configureStore","reducer","rootReducer","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"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","file":"static/js/main.fe059e48.chunk.js","sourcesContent":["export const Colors = {\r\n    white: 'white',\r\n    mainBlue: '#0B4A8E',\r\n    tileBlue1: '#edf6fc',\r\n    tileBlue2: '#e4f2fb',\r\n    tileBlue3: '#dbeef9',\r\n    tileBlue4: '#d2eaf8',\r\n    disabled: '#ddddee',\r\n    disabledText: '#aaaaaa',\r\n    deltaTitle: '#333333',\r\n    deltaPeriod: '#6D92BB'\r\n}\r\n\r\nexport enum IFSColor {\r\n    disabledText = '#cacaca',\r\n    white = '#ffffff',\r\n    veniceBlue = '#0B4A8E',\r\n    catskillWhite = '#E1E9F1',\r\n    tropicalBlue = '#D2EAF8',\r\n    cornflowerBlue = '#C5E3F5',\r\n    rhinoBlue = '#283F63',\r\n    heatherGrey = '#B3C1CF',\r\n    downriverBlue = '#0B2D56',\r\n    alto = '#D9D9D9',\r\n    linkWaterBlue = '#E0F1F7',\r\n    vikingBlue = '#79C4DC',\r\n    poloBlue = '#7FA0C4',\r\n    // colors with opacity (number at the end of name equals opacity percentage)\r\n    shakespeare15 = '#449DD129',\r\n    spray15 ='#72F2C326',\r\n    tumbleweed08 = '#D7B3772E',\r\n    wildSandGrey = '#F5F5F5',\r\n    stormGray= '#686D85',\r\n    silver = '#C7C7C7',\r\n    AquaHaze = '#F2F5F8'\r\n}\r\n","import { createSlice } from '@reduxjs/toolkit';\r\nimport { RootState } from '../reducers';\r\n\r\nexport enum DynamicElementStatus {\r\n    CLOSED = 'closed',\r\n    COLLAPSED = 'collapsed',\r\n    VISIBLE = 'visible'\r\n}\r\n\r\nexport interface DynamicElementsState {\r\n    entities: Record<string, DynamicElementStatus>\r\n}\r\n\r\nconst initialState: DynamicElementsState = {\r\n    entities: {},\r\n}\r\n\r\nexport const dynamicElementsSlice = createSlice({\r\n    name: 'dynamicElements',\r\n    initialState,\r\n    reducers: {\r\n        setDynamicElement: (state, action) => {\r\n            const {status, title} = action.payload;\r\n            if (state.entities[title] && state.entities[title] !== DynamicElementStatus.VISIBLE) {\r\n                state.entities[title] = DynamicElementStatus.VISIBLE\r\n            } else {\r\n                state.entities[title] = status;\r\n            }\r\n        },\r\n    },\r\n})\r\n\r\nexport const {setDynamicElement} = dynamicElementsSlice.actions\r\n\r\nexport const selectDynamicElement = (state: RootState) => state.dynamicElements.entities\r\n\r\nexport default dynamicElementsSlice.reducer\r\n","export const calculateFlexBasis = (size: number, maxSize: number, multiplier: number) => {\r\n    let flexBasis = size * multiplier * 100 / maxSize\r\n    if (flexBasis > 100) {\r\n        flexBasis = 100\r\n    }\r\n    return `${flexBasis}%`\r\n}\r\n\r\nexport const calculateFilledWidth = (total: number, delta: number) => {\r\n    const filledWidth = (total / (total + delta)) * 100\r\n    return `${filledWidth}%`\r\n}\r\n","import React from 'react';\r\nimport styled, { css } from 'styled-components';\r\nimport { calculateFlexBasis } from './style.utils';\r\n\r\nexport interface ButtonProps {\r\n    size: number;\r\n    value: string;\r\n    color?: string;\r\n    backgroundColor?: string;\r\n    onClick?: () => void;\r\n} \r\n\r\nexport const Button = React.forwardRef<HTMLButtonElement, ButtonProps>((props, ref) => {\r\n    return (\r\n        <StyledDiv {...props} >\r\n            <StyledButton ref={ref} {...props} >\r\n                {props.value}\r\n            </StyledButton>\r\n        </StyledDiv>\r\n    )\r\n});\r\n\r\nexport const DisabledDiv = styled.div`\r\n    position: absolute;\r\n    margin: 5px 10px 5px 10px;\r\n    background-color: rgba(1,1,1,0.75);\r\n    width: 100%;\r\n\r\n`\r\n\r\nexport const StyledDiv = styled.div`\r\n    box-sizing: border-box;\r\n    display: flex;\r\n    overflow: hidden;\r\n    ${({backgroundColor}) => backgroundColor && css`background-color: ${backgroundColor}`}\r\n    @media all and (min-width: 0px) and (max-width: 600px) {\r\n      flex-basis: ${(props: ButtonProps) => calculateFlexBasis(props.size, 6, 6)};\r\n    }\r\n    @media all and (min-width: 601px) and (max-width: 1200px) {\r\n      flex-basis: ${(props: ButtonProps) => calculateFlexBasis(props.size, 6, 3)};\r\n    }\r\n    @media all and (min-width: 1201px) and (max-width: 1700px) {\r\n      flex-basis: ${(props: ButtonProps) => calculateFlexBasis(props.size, 6, 2)};\r\n    }\r\n    @media all and (min-width: 1701px) {\r\n      flex-basis: ${(props: ButtonProps) => calculateFlexBasis(props.size, 6, 1)};\r\n    }\r\n`\r\n\r\nexport const StyledButton = styled.button`\r\n    font-weight: 500;\r\n    width: 100%;\r\n\r\n    padding: 7px 10px 7px 10px;\r\n    margin: 5px 10px 5px 10px;\r\n\r\n    text-overflow: ellipsis;\r\n    overflow: hidden;\r\n    white-space: nowrap;\r\n    justify-content: center;\r\n\r\n    color: ${(props: ButtonProps) => props.color ? props.color : 'white'};\r\n    background-color:${(props: ButtonProps) => props.backgroundColor ? props.backgroundColor : '#0B4A8E'};\r\n\r\n    border: 1px solid #0B4A8E;\r\n    border-radius: 0px;\r\n\r\n    cursor: pointer;\r\n`\r\n","import React from 'react';\r\nimport { Popper, PopperProps } from '@material-ui/core';\r\n\r\n\r\nexport interface IfsPopperProps {\r\n    isOpen: boolean;\r\n    popperProps?: Partial<PopperProps>;\r\n}\r\n\r\nexport const IfsPopper: React.FunctionComponent<IfsPopperProps> = ({ isOpen, popperProps, children }) => {\r\n    return (\r\n        <Popper\r\n            placement='bottom-start'\r\n            {...popperProps}\r\n            open={isOpen}\r\n        >\r\n            {children}\r\n        </Popper>\r\n    )\r\n}","import { PopperProps } from '@material-ui/core';\r\nimport React, { useEffect, useRef, useState } from 'react'\r\nimport { Button, ButtonProps } from '../Button'\r\nimport { IfsPopper } from '../IfsPopper/IfsPopper';\r\n\r\n\r\nexport interface PopperableButtonProps extends ButtonProps {\r\n    defaultOpen?: boolean;\r\n    popperProps?: Partial<PopperProps>;\r\n}\r\n\r\nexport const PopperableButton: React.FunctionComponent<PopperableButtonProps> = ({ defaultOpen, children, popperProps, ...buttonProps }) => {\r\n    const [isOpen, setIsOpen] = useState<boolean>(!!defaultOpen);\r\n    \r\n    const [anchorElement, setAnchorElement] = useState<HTMLButtonElement>();\r\n    const ref = useRef<HTMLButtonElement>(null);\r\n\r\n    useEffect(() => {\r\n        if (ref.current) setAnchorElement(ref.current);\r\n    }, [ref.current]);\r\n\r\n    return (\r\n        <>\r\n            <Button ref={ref} {...buttonProps} onClick={() => setIsOpen(!isOpen)} />\r\n            {anchorElement &&\r\n                <IfsPopper {...popperProps} isOpen={isOpen} popperProps={{ anchorEl: anchorElement }} >\r\n                    {children}\r\n                </IfsPopper>\r\n            }\r\n        </>\r\n    )\r\n}","import React from 'react';\r\nimport { PopperableButton } from '../../../shared/PopperableButton/PopperableButton';\r\nimport { Tile } from '../../../shared/Tile/Tile';\r\n\r\nexport const DatabaseButton: React.FunctionComponent<{}> = () => {\r\n    return (\r\n        <PopperableButton value='Database: IFS Database' size={2}>\r\n            <div style={{backgroundColor: 'white', width:'300px', height:'200px', border: '1px solid black'}}>-upa</div>\r\n        </PopperableButton>\r\n    )\r\n}","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Colors } from '../../../consts/colors'\r\nimport { Button } from '../../shared/Button'\r\nimport { DatabaseButton } from './DatabaseButton/DatabaseButton';\r\n\r\nconst ToolbarWrapper = styled.div`\r\n    display: flex;\r\n    flex-direction: row;\r\n    flex-wrap: wrap;\r\n`;\r\n\r\nexport const Toolbar = () => {\r\n    return (\r\n        <ToolbarWrapper>\r\n            <DatabaseButton />\r\n            <Button\r\n                size={1}\r\n                value='Database details'\r\n                backgroundColor={Colors.white}\r\n                color={Colors.mainBlue}\r\n            />\r\n            <Button\r\n                size={1}\r\n                value='Filters: Active variant'\r\n                backgroundColor={Colors.tileBlue1}\r\n                color={Colors.mainBlue}\r\n            />\r\n            <Button size={1} value='Apply filters' />\r\n            <Button\r\n                size={0.5}\r\n                value='Generate file'\r\n                backgroundColor={Colors.white}\r\n                color={Colors.mainBlue}\r\n            />\r\n            <Button\r\n                size={0.5}\r\n                value='View 11/11'\r\n                backgroundColor={Colors.disabled}\r\n                color={Colors.disabledText}\r\n            />\r\n        </ToolbarWrapper>\r\n    )\r\n}","import styled from 'styled-components'\r\nimport { StyledDivProps } from './Tile'\r\nimport { Colors, IFSColor } from '../../../consts/colors';\r\nimport {calculateFlexBasis} from '../style.utils'\r\n\r\n\r\ninterface TileStylesProps {\r\n    size: number;\r\n}\r\n\r\nexport const TileStyles = styled.div`\r\n    box-sizing: border-box;\r\n    color: ${Colors.mainBlue};\r\n    flex-grow: 1;\r\n    @media all and (min-width: 0px) and (max-width: 600px) {\r\n      flex-basis: ${(props: TileStylesProps) => calculateFlexBasis(props.size, 6, 6)};\r\n    }\r\n    @media all and (min-width: 601px) and (max-width: 1200px) {\r\n      flex-basis: ${(props: TileStylesProps) => calculateFlexBasis(props.size, 6, 3)};\r\n    }\r\n    @media all and (min-width: 1201px) and (max-width: 1700px) {\r\n      flex-basis: ${(props: TileStylesProps) => calculateFlexBasis(props.size, 6, 2)};\r\n    }\r\n    @media all and (min-width: 1701px) {\r\n      flex-basis: ${(props: TileStylesProps) => calculateFlexBasis(props.size, 6, 1)};\r\n    }\r\n`;\r\n\r\nexport const StyledMarginDiv = styled.div`\r\n    padding: 20px 10px 0 10px;\r\n    height: calc(100% - 20px);\r\n`;\r\n\r\nexport const StyledDiv = styled.div`\r\n    padding: 7px 10px 0 10px;\r\n    background-color:${(props: StyledDivProps) => props.backgroundColor};\r\n    border: 1px solid #c7dbea;\r\n    height: ${(props: StyledDivProps) => props.collapsed ? 'auto' : 'calc(100% - 9px)'}\r\n`\r\n\r\nexport const TitleWrapper = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  margin: 3px 7px 15px 7px;\r\n`;\r\n\r\nexport const LabelWrapper = styled.div`\r\n  font-size: 13px;\r\n  font-weight: 700;\r\n  i {\r\n    margin-left: 7px;\r\n  }\r\n`;\r\n\r\nexport const ToolsWrapper = styled.div`\r\n  i {\r\n    margin-left: 7px;\r\n    color: ${IFSColor.silver}\r\n  }\r\n`;\r\n\r\nexport const ContentWrapper = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  height: calc(100% - 40px);\r\n`;\r\n","import { TileStyles, StyledDiv, TitleWrapper, LabelWrapper, ToolsWrapper, ContentWrapper, StyledMarginDiv } from './Tile.styles';\r\nimport React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { DynamicElementStatus, setDynamicElement } from '../../../store/reducers/dynamicElements/dynamicElements';\r\nimport { RootState } from '../../../store/reducers/reducers';\r\n\r\nexport interface TileProps {\r\n    title: string;\r\n    icon?: string,\r\n    size?: number,\r\n    backgroundColor?: string,\r\n    content: JSX.Element\r\n}\r\n\r\nexport type StyledDivProps = TileProps & {collapsed?: boolean};\r\n\r\nexport const Tile = (props: TileProps) => {\r\n    const iconClassName = `fa fa-${props.icon}`;\r\n    const dispatch = useDispatch();\r\n    const dynamicElements = useSelector((state: RootState) => state.dynamicElements.entities);\r\n    const collapsed = dynamicElements[props.title] === DynamicElementStatus.COLLAPSED;\r\n    const closed = dynamicElements[props.title] === DynamicElementStatus.CLOSED;\r\n\r\n    const setDynamicsElementStatus = (status: DynamicElementStatus) => {\r\n        dispatch(setDynamicElement({title: props.title, status: status}))\r\n        console.log(dynamicElements)\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {\r\n                !closed &&\r\n                <TileStyles size={1} {...props}>\r\n                    <StyledMarginDiv>\r\n                        <StyledDiv backgroundColor={'white'} {...{...props, collapsed: collapsed}}>\r\n                            <TitleWrapper>\r\n                                <LabelWrapper>\r\n                                    {props.title}\r\n                                    <i className={iconClassName}/>\r\n                                </LabelWrapper>\r\n                                <ToolsWrapper>\r\n                                    <i className={`fa fa-chevron-${collapsed ? 'down' : 'up'}`}\r\n                                       onClick={() => setDynamicsElementStatus(DynamicElementStatus.COLLAPSED)}/>\r\n                                    <i className='fas fa-times'\r\n                                       onClick={() => setDynamicsElementStatus(DynamicElementStatus.CLOSED)}/>\r\n                                </ToolsWrapper>\r\n                            </TitleWrapper>\r\n                            <ContentWrapper>\r\n                                {!collapsed && props.content}\r\n                            </ContentWrapper>\r\n                        </StyledDiv>\r\n                    </StyledMarginDiv>\r\n                </TileStyles>\r\n            }\r\n        </>\r\n    )\r\n}\r\n","import styled from 'styled-components';\r\nimport { IFSColor } from '../../../../consts/colors';\r\n\r\nexport const ValueWrapper = styled.div`\r\n  font-size: 36px;\r\n`;\r\n\r\nexport const StatsWrapper = styled.div`\r\n  font-size: 12px;\r\n  i {\r\n    margin-left: 7px;\r\n  }\r\n`;\r\n\r\nexport const StyledVerticalLine = styled.div`\r\n  border-left: 2px solid ${IFSColor.heatherGrey};\r\n  margin-right: 10px;\r\n  margin-left: 10px;\r\n  height: 27px;\r\n`;\r\n\r\nexport const CounterWrapper = styled.div`\r\n  display: flex;\r\n  margin: 7px;\r\n  align-items: baseline;\r\n`;","import React from 'react'\r\nimport { CounterWrapper, StatsWrapper, StyledVerticalLine, ValueWrapper } from './Counter.styles';\r\n\r\nexport interface CounterProps {\r\n    value: number,\r\n    stat: number\r\n}\r\n\r\nexport const Counter = (props: CounterProps) => {\r\n\r\n    return (\r\n        <CounterWrapper>\r\n            <ValueWrapper>\r\n                {props.value}\r\n            </ValueWrapper>\r\n            <StyledVerticalLine/>\r\n            <StatsWrapper>\r\n                {props.stat}\r\n                <i className=\"fas fa-arrow-up\"/>\r\n            </StatsWrapper>\r\n        </CounterWrapper>\r\n    )\r\n}","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Tile } from '../../shared/Tile/Tile'\r\nimport { Counter } from '../../shared/Tile/Counter/Counter';\r\n\r\nconst InfoTilesWrapper = styled.div`\r\n    display: flex;\r\n    flex-direction: row;\r\n    box-sizing: border-box;\r\n    flex-wrap: wrap;\r\n`;\r\n\r\nexport const InfoTiles = () => {\r\n    const systemCounter = <><Counter value={123} stat={45}/></>;\r\n    const connectionsCounter = <><Counter value={67} stat={8}/></>;\r\n    const callsCounter = <><Counter value={901} stat={234}/></>;\r\n    const dataVolumeCounters = <>\r\n        <Counter value={56} stat={789}/>\r\n        <Counter value={0} stat={1}/>\r\n        <Counter value={234} stat={567}/>\r\n    </>\r\n    return (\r\n        <InfoTilesWrapper>\r\n            <Tile title={'SYSTEMS'} content={systemCounter} icon={'cog'} size={1} backgroundColor='#edf6fc'/>\r\n            <Tile title={'CONNECTIONS'} content={connectionsCounter} icon={'handshake'} size={1} backgroundColor='#e4f2fb'/>\r\n            <Tile title={'CALLS'} content={callsCounter} icon={'tachometer-alt'} size={1} backgroundColor='#dbeef9'/>\r\n            <Tile title={'DATA VOLUME'} content={dataVolumeCounters} icon={'chart-pie'} size={3} backgroundColor='#d2eaf8'/>\r\n        </InfoTilesWrapper>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { Bar } from 'react-chartjs-2'\r\n\r\nexport interface DetailedChartProps {};\r\n\r\nexport const DetailedChart = (props: DetailedChartProps) => {\r\n\r\n    const barData = ['5', '5', '6', '7', '9', '8', '8', '8', '10', '12', '13', '15', '16', '14', '15', '16', '17', '18', '19', '19', '19', '15', '16', '20', '21', '20', '21', '19', '18', '18', '17', '19', '19', '17', '16', '17', '18', '19', '20', '21', '22', '23', '24'];\r\n    const lineData = ['1', '2', '3', '3', '4', '5', '3', '2', '6', '7', '8', '8', '7', '7', '8', '9', '10', '11', '12', '12', '10', '9', '13', '17', '13', '12', '11', '10', '10', '10', '9', '8', '10', '10', '8', '8', '7', '5', '4', '3', '4', '5', '6'];\r\n    const labels = ['25', '26', '27', '28', '29', '30', '31', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '1', '2', '3', '4', '5', '6'];\r\n    \r\n    const data = {\r\n      labels: labels,\r\n      datasets: [\r\n        {\r\n          type: 'bar',\r\n          label: 'Number of systems',\r\n          data: barData,\r\n          fill: false,\r\n          backgroundColor: 'rgb(103, 160, 224, 0.3)',\r\n          borderColor: 'rgb(103, 160, 224, 0.8)'  ,\r\n          borderWidth: 2,\r\n        },\r\n        {\r\n          type: 'line',\r\n          label: 'Unused systems',\r\n          data: lineData,\r\n          fill: true,\r\n          backgroundColor: 'rgb(39, 160, 45, 0.3)',\r\n          borderColor: 'rgb(39, 160, 45, 0.8)',\r\n          borderWidth: 2,\r\n          pointStyle: 'rect',\r\n          pointBackgroundColor: 'white',\r\n          pointBorderColor: 'rgb(39, 160, 45, 0.8)',\r\n          pointRadius: 6,\r\n          pointHoverRadius: 7,\r\n        },\r\n      ],\r\n    }\r\n    \r\n    const options = {\r\n      legend: {\r\n        usePointStyle: true,\r\n        align: 'end',\r\n        fontFamily: \"'Montserrat-Bold', sans-serif\",\r\n      },\r\n      scales: {\r\n        yAxes: [\r\n          {\r\n            ticks: {\r\n              beginAtZero: false,\r\n              fontSize: 10,\r\n              fontFamily: \"'Montserrat-Bold', sans-serif\"\r\n            },\r\n          },\r\n        ],\r\n        xAxes: [\r\n          {\r\n            ticks: {\r\n              fontSize: 10,\r\n              fontFamily: \"'Montserrat-Bold', sans-serif\"\r\n            },\r\n          },\r\n        ],\r\n      },\r\n    }\r\n\r\n    return (\r\n        <Bar\r\n            data={data}\r\n            options={options}\r\n            height={129}\r\n            width={400}\r\n        />\r\n    )\r\n}","import React from 'react'\r\nimport { Tile } from '../../shared/Tile/Tile'\r\nimport { DetailedChart } from '../../shared/charts/detailedChart/DetailedChart'\r\nimport { IFSColor } from '../../../consts/colors';\r\n\r\n\r\n\r\nexport const DetailedChartTile = () => {\r\n\r\n    const content = <DetailedChart />\r\n\r\n    return (\r\n        <Tile\r\n            title={\"SYSTEM BY PERIOD\"}\r\n            content={content}\r\n            backgroundColor={IFSColor.white}\r\n            size={4}\r\n        ></Tile>\r\n    )\r\n}\r\n","import styled from 'styled-components'\r\nimport { Colors } from '../../../consts/colors';\r\nimport { SingleDeltaProps } from './SingleDelta';\r\nimport { calculateFilledWidth } from '../../shared/style.utils';\r\n\r\nexport const DeltaStyles = styled.div`\r\n    width: 100%;\r\n    margin-bottom: 10px;\r\n`;\r\n\r\nexport const SummaryWrapper = styled.div`\r\n    width: 100%;\r\n    display: flex;\r\n    justify-content: space-between;\r\n`;\r\n\r\nexport const TitlePeriodWrapper = styled.div`\r\n    margin: 7px;\r\n    padding-top: 3px;\r\n`;\r\n\r\nexport const PeriodWrapper = styled.div`\r\n    color: ${Colors.deltaPeriod};\r\n    width: 115px;\r\n    height: 12px;\r\n    font-size: 10px;\r\n`;\r\n\r\nexport const TitleWrapper = styled.div`\r\n    color: ${Colors.deltaTitle};\r\n    font-size: 14px;\r\n    width: 110px;\r\n    height: 16px;\r\n`;\r\n\r\nexport const GraphicalStyles = styled.div`\r\n    width: 100%;\r\n    border: 1px solid ${(props: SingleDeltaProps) => props.color};\r\n`;\r\n\r\nexport const Filled = styled.div`\r\n    width: ${(props: SingleDeltaProps) => calculateFilledWidth(props.total, props.delta)};\r\n    height: 7px;\r\n    background-color: ${(props: SingleDeltaProps) => props.color}AA;\r\n    border-right: 1px solid ${(props: SingleDeltaProps) => props.color};\r\n`;\r\n","import React from 'react';\r\nimport {\r\n    DeltaStyles, GraphicalStyles, PeriodWrapper, SummaryWrapper,\r\n    TitlePeriodWrapper,\r\n    TitleWrapper,\r\n    Filled\r\n} from './SingleDelta.styles';\r\nimport { Counter } from '../../shared/Tile/Counter/Counter';\r\n\r\nexport interface SingleDeltaProps {\r\n    title: string;\r\n    total: number,\r\n    delta: number,\r\n    periods: string,\r\n    color: string\r\n}\r\n\r\nexport const SingleDelta = (props: SingleDeltaProps) => {\r\n\r\n    return (\r\n        <DeltaStyles>\r\n            <SummaryWrapper>\r\n                <TitlePeriodWrapper>\r\n                    <TitleWrapper>{props.title}</TitleWrapper>\r\n                    <PeriodWrapper>{props.periods}</PeriodWrapper>\r\n                </TitlePeriodWrapper>\r\n                <Counter value={props.total} stat={props.delta}/>\r\n            </SummaryWrapper>\r\n            <GraphicalStyles {...props}>\r\n                <Filled {...props}/>\r\n            </GraphicalStyles>\r\n        </DeltaStyles>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport styled from 'styled-components';\r\nimport { SingleDelta } from './SingleDelta';\r\nimport { Tile } from '../../shared/Tile/Tile';\r\nimport { IFSColor } from '../../../consts/colors';\r\n\r\nconst DeltasWrapper = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: space-between;\r\n    width: 100%;\r\n    height: 100%;\r\n`;\r\n\r\nexport const DeltaTile = () => {\r\n\r\n    const content = (\r\n        <DeltasWrapper>\r\n            <SingleDelta title={'System quantity'} total={594} delta={18} periods={'25.12.2019 - 14.02.2020'}\r\n                         color={'#C9D7E6'}/>\r\n            <SingleDelta title={'Unused systems'} total={88} delta={39} periods={'25.12.2019 - 14.02.2020'}\r\n                         color={'#C2E3BF'}/>\r\n            <SingleDelta title={'New systems'} total={2} delta={0} periods={'25.12.2019 - 14.02.2020'}\r\n                         color={'#FEE8BF'}/>\r\n            <SingleDelta title={'Deleted systems'} total={1} delta={0} periods={'25.12.2019 - 14.02.2020'}\r\n                         color={'#F5D7D5'}/>\r\n        </DeltasWrapper>\r\n    )\r\n\r\n    return (\r\n        <Tile\r\n            title={\"DELTAS\"}\r\n            content={content}\r\n            backgroundColor={IFSColor.white}\r\n            size={2}/>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport styled from 'styled-components';\r\nimport { DetailedChartTile } from '../DetailedChartTile/DetailedChartTile';\r\nimport { DeltaTile } from '../DeltaTile/DeltaTile';\r\n\r\nconst DetailsWrapper = styled.div`\r\n    display: flex;\r\n    flex: 1;\r\n`;\r\n\r\nexport const DetailsTile = () => {\r\n    return (\r\n        <DetailsWrapper>\r\n            <DetailedChartTile />\r\n            <DeltaTile />\r\n        </DetailsWrapper>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { DynamicElementStatus, selectDynamicElement, setDynamicElement } from '../../../store/reducers/dynamicElements/dynamicElements';\r\n\r\nexport const ClosedTilesList = () => {\r\n    const dynamicElements = useSelector(selectDynamicElement);\r\n    const dispatch = useDispatch();\r\n\r\n    const setVisible = (title: string) => {\r\n        dispatch(setDynamicElement({title: title, status: DynamicElementStatus.VISIBLE}))\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {\r\n                Object.keys(dynamicElements).filter(title => dynamicElements[title] === DynamicElementStatus.CLOSED)\r\n                    .map(dynamicElementTitle => (\r\n                            <div key={dynamicElementTitle}\r\n                                 onClick={() => setVisible(dynamicElementTitle)}>{dynamicElementTitle}\r\n                            </div>\r\n                        )\r\n                    )\r\n            }\r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { Toolbar } from './components/Overview/Toolbar/Toolbar';\r\nimport { InfoTiles } from './components/Overview/InfoTiles/InfoTiles';\r\nimport { createGlobalStyle } from 'styled-components';\r\nimport './App.css'\r\nimport { DetailsTile } from './components/Overview/DetailsTile/DetailsTile';\r\nimport { ClosedTilesList } from './components/shared/ClosedTilesList/ClosedTilesList';\r\n\r\nfunction App() {\r\n    const GlobalStyle = createGlobalStyle`\r\n      * {\r\n        font-size: 16px;\r\n        font-family: 'AvenirMedium', 'AvenirMedium';\r\n      }\r\n    `\r\n    return (\r\n        <div className=\"App\">\r\n            <GlobalStyle/>\r\n            <Toolbar/>\r\n            <InfoTiles/>\r\n            <DetailsTile/>\r\n            <ClosedTilesList/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { combineReducers } from '@reduxjs/toolkit';\r\nimport dynamicElementsReducer from './dynamicElements/dynamicElements';\r\n\r\nconst combinedReducer = combineReducers({\r\n    dynamicElements: dynamicElementsReducer,\r\n});\r\n\r\nexport type RootState = ReturnType<typeof combinedReducer>;\r\n\r\nexport default combinedReducer;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport rootReducer from './reducers/reducers';\r\n\r\nexport const makeStore = () => {\r\n    return configureStore({\r\n        reducer: rootReducer,\r\n    });\r\n};\r\n\r\nexport default makeStore();\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport store from './store/store';\r\nimport { Provider } from 'react-redux';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}