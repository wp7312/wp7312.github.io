{"version":3,"sources":["consts/colors.ts","components/shared/Button.tsx","components/Overview/Toolbar/Toolbar.tsx","components/shared/styledTile.ts","components/shared/Tile.styled.tsx","components/Overview/InfoTiles/InfoTiles.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Colors","Button","props","StyledDiv","StyledButton","value","styled","div","flexBasis","button","color","backgroundColor","Toolbar","style","display","flexDirection","StyledTile","flexGrow","Tile","InfoTiles","boxSizing","App","GlobalStyle","createGlobalStyle","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sLAAaA,EACF,QADEA,EAEC,UAFDA,EAGE,UAHFA,EAOC,UAPDA,EAQK,U,qBCCLC,EAAS,SAACC,GACnB,OACI,cAACC,EAAD,2BAAeD,GAAf,aACI,cAACE,EAAD,2BAAkBF,GAAlB,aACKA,EAAMG,aAcVF,GARcG,IAAOC,IAAV,kJAQCD,IAAOC,IAAV,0HAEJ,SAACL,GAAD,OAAwBA,EAAMM,cAKnCJ,EAAeE,IAAOG,OAAV,wXAYZ,SAACP,GAAD,OAAwBA,EAAMQ,MAAQR,EAAMQ,MAAQ,WAC1C,SAACR,GAAD,OAAwBA,EAAMS,gBAAkBT,EAAMS,gBAAkB,aC3ClFC,EAAU,WACnB,OACI,sBAAKC,MAAO,CAAEC,QAAS,OAAQC,cAAe,OAA9C,UACI,cAAC,EAAD,CAAQP,UAAS,UAAK,IAAM,EAAX,KAAiBH,MAAM,2BACxC,cAAC,EAAD,CACIG,UAAS,UAAK,IAAM,EAAX,KACTH,MAAM,mBACNM,gBAAiBX,EACjBU,MAAOV,IAEX,cAAC,EAAD,CACIQ,UAAS,UAAK,IAAM,EAAX,KACTH,MAAM,0BACNM,gBAAiBX,EACjBU,MAAOV,IAEX,cAAC,EAAD,CAAQQ,UAAS,UAAK,IAAM,EAAX,KAAiBH,MAAM,kBACxC,cAAC,EAAD,CACIG,UAAS,UAAK,IAAM,GAAX,KACTH,MAAM,gBACNM,gBAAiBX,EACjBU,MAAOV,IAEX,cAAC,EAAD,CACIQ,UAAS,UAAK,IAAM,GAAX,KACTH,MAAM,aACNM,gBAAiBX,EACjBU,MAAOV,QC5BVgB,EAAaV,IAAOC,IAAV,+EAEL,SAACL,GAAD,OAAsBA,EAAMe,YAGjCd,EAAYG,IAAOC,IAAV,4KAGC,SAACL,GAAD,OAAsBA,EAAMS,mBCHtCO,EAAO,SAAChB,GAEjB,OACI,cAACc,EAAD,2BAAgBd,GAAhB,aACI,cAAC,EAAD,eAAeA,QCTdiB,GDeMb,IAAOC,IAAV,4BCfS,WACrB,OACI,sBAAKM,MAAO,CAAEC,QAAS,OAAQC,cAAe,MAAOK,UAAU,cAA/D,UACI,cAAC,EAAD,CAAMH,SAAQ,UAAK,IAAI,EAAT,KAAeN,gBAAgB,YAC7C,cAAC,EAAD,CAAMM,SAAQ,UAAK,IAAI,EAAT,KAAeN,gBAAgB,YAC7C,cAAC,EAAD,CAAMM,SAAQ,UAAK,IAAI,EAAT,KAAeN,gBAAgB,YAC7C,cAAC,EAAD,CAAMM,SAAQ,UAAK,GAAL,KAAeN,gBAAgB,iB,MCa1CU,MAhBf,WACE,IAAMC,EAAcC,YAAH,gHAMjB,OACE,sBAAKC,UAAU,MAAf,UACE,cAACF,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,QCHSG,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCJdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.6ff77dda.chunk.js","sourcesContent":["export const Colors = {\r\n    white: 'white',\r\n    mainBlue: '#0B4A8E',\r\n    tileBlue1: '#edf6fc',\r\n    tileBlue2: '#e4f2fb',\r\n    tileBlue3: '#dbeef9',\r\n    tileBlue4: '#d2eaf8',\r\n    disabled: '#ddddee',\r\n    disabledText: '#aaaaaa'\r\n}","import styled from 'styled-components'\r\n\r\nexport interface ButtonProps {\r\n    flexBasis: string;\r\n    value: string;\r\n    color?: string;\r\n    backgroundColor?: string;\r\n}\r\n\r\nexport const Button = (props: ButtonProps) => {\r\n    return (\r\n        <StyledDiv {...props} >\r\n            <StyledButton {...props} >\r\n                {props.value}\r\n            </StyledButton>\r\n        </StyledDiv>\r\n    )\r\n}\r\n\r\nexport const DisabledDiv = styled.div`\r\n    position: absolute;\r\n    margin: 5px 10px 5px 10px;\r\n    background-color: rgba(1,1,1,0.75);\r\n    width: 100%;\r\n\r\n`\r\n\r\nexport const StyledDiv = styled.div`\r\n    box-sizing: border-box;\r\n    flex-basis: ${(props: ButtonProps) => props.flexBasis};\r\n    display: flex;\r\n    overflow: hidden;\r\n`\r\n\r\nexport const StyledButton = styled.button`\r\n    font-weight: 500;\r\n    width: 100%;\r\n\r\n    padding: 7px 10px 7px 10px;\r\n    margin: 5px 10px 5px 10px;\r\n\r\n    text-overflow: ellipsis;\r\n    overflow: hidden;\r\n    white-space: nowrap;\r\n    justify-content: center;\r\n\r\n    color: ${(props: ButtonProps) => props.color ? props.color : 'white'};\r\n    background-color:${(props: ButtonProps) => props.backgroundColor ? props.backgroundColor : '#0B4A8E'};\r\n\r\n    border: 1px solid #0B4A8E;\r\n    border-radius: 0px;\r\n\r\n    cursor: pointer;\r\n`\r\n","import React from 'react'\r\nimport { Colors } from '../../../consts/colors'\r\nimport { Button } from '../../shared/Button'\r\n\r\nexport const Toolbar = () => {\r\n    return (\r\n        <div style={{ display: 'flex', flexDirection: 'row' }}>\r\n            <Button flexBasis={`${100 / 3}%`} value='Database: IFS Database' />\r\n            <Button\r\n                flexBasis={`${100 / 6}%`}\r\n                value='Database details'\r\n                backgroundColor={Colors.white}\r\n                color={Colors.mainBlue}\r\n            />\r\n            <Button\r\n                flexBasis={`${100 / 6}%`}\r\n                value='Filters: Active variant'\r\n                backgroundColor={Colors.tileBlue1}\r\n                color={Colors.mainBlue}\r\n            />\r\n            <Button flexBasis={`${100 / 6}%`} value='Apply filters' />\r\n            <Button\r\n                flexBasis={`${100 / 12}%`}\r\n                value='Generate file'\r\n                backgroundColor={Colors.white}\r\n                color={Colors.mainBlue}\r\n            />\r\n            <Button\r\n                flexBasis={`${100 / 12}%`}\r\n                value='View 11/11'\r\n                backgroundColor={Colors.disabled}\r\n                color={Colors.disabledText}\r\n            />\r\n        </div>\r\n    )\r\n}","import styled from 'styled-components'\r\nimport { TileProps } from './Tile.styled'\r\n\r\nexport const StyledTile = styled.div`\r\n    box-sizing: border-box;\r\n    flex-basis: ${(props: TileProps) => props.flexGrow};\r\n`\r\n\r\nexport const StyledDiv = styled.div`\r\n    margin: 20px 10px 5px 10px;\r\n    padding: 7px 10px 7px 10px;\r\n    background-color:${(props: TileProps) => props.backgroundColor};\r\n    height: 60px;\r\n    border: 1px solid #c7dbea;\r\n`","import styled from 'styled-components'\r\nimport { StyledTile, StyledDiv } from './styledTile'\r\n\r\nexport interface TileProps {\r\n    flexGrow: string,\r\n    backgroundColor: string\r\n}\r\n\r\nexport const Tile = (props: TileProps) => {\r\n\r\n    return (\r\n        <StyledTile {...props}>\r\n            <StyledDiv {...props}>\r\n            </StyledDiv>\r\n        </StyledTile>\r\n    )\r\n}\r\n\r\nexport const Div = styled.div`\r\n`\r\n\r\n","import React from 'react'\r\nimport { Tile } from '../../shared/Tile.styled'\r\n\r\nexport const InfoTiles = () => {\r\n    return (\r\n        <div style={{ display: 'flex', flexDirection: 'row', boxSizing:'border-box' }}>\r\n            <Tile flexGrow={`${100/6}%`} backgroundColor='#edf6fc'/>\r\n            <Tile flexGrow={`${100/6}%`} backgroundColor='#e4f2fb'/>\r\n            <Tile flexGrow={`${100/6}%`} backgroundColor='#dbeef9'/>\r\n            <Tile flexGrow={`${100/2}%`} backgroundColor='#d2eaf8'/>\r\n        </div>\r\n    )\r\n}","import React from 'react';\nimport { Toolbar } from './components/Overview/Toolbar/Toolbar';\nimport { InfoTiles } from './components/Overview/InfoTiles/InfoTiles';\nimport { createGlobalStyle } from 'styled-components';\nimport './App.css'\n\nfunction App() {\n  const GlobalStyle = createGlobalStyle`\n  * {\n    font-size: 16px;\n    font-family: 'AvenirMedium', 'AvenirMedium';\n  }\n`\n  return (\n    <div className=\"App\">\n      <GlobalStyle />\n      <Toolbar />\n      <InfoTiles />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}